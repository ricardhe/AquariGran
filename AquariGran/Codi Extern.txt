/*  
    Joytick & LCD & Menu   by JMLoureiro77

    http://jmloureiro77.blogspot.com.es

  328P Flash 5292 (17%) RAM 409(19%)

 - LCD SIN parpadeo
 - Sistema de menus SIN libreria
 - Joystick una pulsacion con retardo
 - editMode para introducir valores en Menu 1 

CC-BY 3.0 */

//---------------------------------------------------
// 1. Librerias
//---------------------------------------------------
#include <Wire.h>
#include <LiquidCrystal_I2C.h> 

//----------------------------------------------------
// 2. Pines
//----------------------------------------------------
#define xPin     A1   
#define yPin     A0   
#define kPin      7   
//SDA            A4
//SCL            A5

//----------------------------------------------------
// 3. Variables y Comandos
//----------------------------------------------------
int tCount1;
bool refresh;//lcd clear On/Off
//leerJoystick
int joyRead;
int joyPos; 
int lastJoyPos;
long lastDebounceTime = 0; 
long debounceDelay = 70;                 //user define
//Control Joystick
bool PQCP;
bool editMode;
//sistema de menus
int mNivel1;  
int mNivel2;  
//editmode
byte n[19];
int lastN;
int lcdX;
//int lcdY;
bool exiT;
//----------------------------------------------------
// 4. Objetos
//----------------------------------------------------
LiquidCrystal_I2C lcd(0x27,16,2); 

//====================================================
// SETUP
//====================================================
void setup() {
//----------------------------------------------------
// S1. Pines
//----------------------------------------------------
  pinMode(xPin, INPUT);
  pinMode(yPin, INPUT);
  pinMode(kPin, INPUT_PULLUP);
//----------------------------------------------------
// S2. Objetos
//----------------------------------------------------
  lcd.init();
  lcd.backlight(); 
}

//====================================================
// LOOP
//====================================================
void loop() {
  controlJoystick();
  menu();
/*  if (millis()%50==0){
    tCount1++;}
  if (tCount1>1000){tCount1=0;}*/
}

//====================================================
// Menu
//====================================================
void menu(){
  switch (mNivel1){
    case 0:
      menu0();//pantalla de inicio
    break;
    case 1:
        if(mNivel2==1){menu11();
        }else if (mNivel2==2){menu12();
        }else if (mNivel2==3){menu13();}
        else{menu1();}
    break;
    case 2:
        if(mNivel2==1){menu21();
        }else if (mNivel2==2){menu22();
        }else if (mNivel2==3){menu23();}
        else{menu2();}
    break;
    case 3:
      menu3(); //
    break;
  }//switch
}
//----------------------------------------------------
// Pantalla de inicio
//----------------------------------------------------
void menu0(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Pantalla Inicio");
}
//----------------------------------------------------
// Menu 1
//----------------------------------------------------
void menu1(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 1");
  lcd.setCursor(0,1);
//++++++++++++++++++++
  while(editMode){
    controlJoystick();
    lcd.setCursor(lcdX,1);
    if(n[lcdX]!=lastN){
      lcd.print(n[lcdX]);
      lastN=n[lcdX];
    }
  }
}
//-------------------------------------------------1.1
void menu11(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 1.1");
}
//-------------------------------------------------1.2
void menu12(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 1.2");
}
//-------------------------------------------------1.3
void menu13(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 1.3");
}
//----------------------------------------------------
// Menu 2
//----------------------------------------------------
void menu2(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 2");
}
//-------------------------------------------------2.1
void menu21(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 2.1");
}
//-------------------------------------------------2.2
void menu22(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 2.2");
}
//-------------------------------------------------2.3
void menu23(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 2.3");
}
//----------------------------------------------------
// Menu 3
//----------------------------------------------------
void menu3(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 3");
  switch (mNivel2){
    case 0:
      return;
    case 1:
      menu31();
    break;
    case 2:
      menu32();
    break;
    case 3:
      menu33();
    break;
    default:
    break;
  }//switch
}
//-------------------------------------------------3.1
void menu31(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 3.1");
}
//-------------------------------------------------3.2
void menu32(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 3.2");
}
//-------------------------------------------------3.3
void menu33(){
  if (refresh){lcd.clear();refresh=0;}
  lcd.setCursor(0,0);
  lcd.print("Menu 3.3");
}
//====================================================
// Control Joystic
//====================================================
void controlJoystick(){
  leeJoystick();
  if(PQCP) {
    PQCP=0;
    if (joyPos==5){editMode=!editMode;}
    switch (editMode){
       case 1: 
          lcd.blink();
          if (joyPos==4&&n[lcdX]<9){n[lcdX]++;   //arriba
              refresh=0;}
          if (joyPos==3&&n[lcdX]>0){n[lcdX]--;   //abajo
              refresh=0;} 
          if (joyPos==1&&lcdX<19){lcdX++;        //derecha
            refresh=0;}
          if (joyPos==2&&lcdX>0){lcdX--;         //izq
           refresh=0;}
        break;
        case 0:
          lcd.noBlink();
          if (mNivel1<3&&joyPos==3){mNivel1++;    //abajo
            refresh=1;
            mNivel2=0;}
          if (mNivel1>0&&joyPos==4){mNivel1--;    //arriba
            mNivel2=0;
            refresh=1;}
          if (mNivel2<3&&joyPos==1){mNivel2++;   //derecha
            refresh=1;}
          if (mNivel2>0&&joyPos==2){mNivel2--;    //izq
           refresh=1;}
        }//!edit
  }//PQCP
}
int leeJoystick(){
  int x = analogRead(xPin);
  int y = analogRead(yPin);
  int k = digitalRead(kPin);
    if(x>900){joyRead=1;        //x+
    }else if(x<100){joyRead=2;  //x-
    }else if(y>900){joyRead=3;  //y+
    }else if(y<100){joyRead=4;  //y-
    }else if(!k){joyRead=5;
    }else{joyRead=0;}

  if (joyRead != lastJoyPos){lastDebounceTime = millis();}
  if(((millis() - lastDebounceTime) > debounceDelay)&&(joyRead!=joyPos)){
    joyPos=joyRead;
    if(!PQCP){PQCP=1;}
    }
  if(((millis() - lastDebounceTime) > (5*debounceDelay))&&(joyPos==3||joyPos==4)){
    joyPos=joyRead;                     //repeat time only for UP/DOWN
    if(!PQCP){PQCP=1;}
    }
  lastJoyPos=joyRead;
}


	//myFile = SD.open(nomfitxerConfig, FILE_READ);//abrimos  el archivo 
	//if (myFile) {
	//	if (myFile.available())
	//	{
	//		Serial.println(nomfitxerConfig);
	//		contingutFitxerConf = myFile.readString();
	//	}
	//	
	//	//while (myFile.available()) {

	//	//	char caracter = myFile.read();
	//	//	contingutFitxerConf = contingutFitxerConf + caracter;

	//	//	//contingutFitxerConf = contingutFitxerConf + myFile.read();

	//	//	//Serial.write(myFile.read());
	//	//}
	//	myFile.close(); //cerramos el archivo
	//}
	//else {
	//	Serial.println("Error al abrir el archivo");
	//}

	//const byte bufferSize = 150; //define number of bytes expected on the JSON thread
	//char json[bufferSize]; //create a char array buffer that is 150 bytes in size in this case
	//myFile = SD.open(nomfitxerConfig, FILE_READ);//abrimos  el archivo 
	//if (myFile) {

	//		if (myFile.available())
	//		{
	//			myFile.readBytes(json, bufferSize);
	//			myFile.close();
	//			Serial.println(json); //prints whatever JSON string values were read
	//			StaticJsonBuffer<JSON_OBJECT_SIZE(12)> jsonBuffer; //We know our JSON string just has 12 objects only and no arrays, so our buffer is set to handle that many
	//			//DynamicJsonBuffer  jsonBuffer(200);
	//			JsonObject& root = jsonBuffer.parseObject(json);    // breaks the JSON string into individual items, saves into JsonObject 'root'
	//			if (!root.success()) {
	//				Serial.println("parseObject() failed");
	//				return;   //if parsing failed, this will exit the function and not change the values to 00

	//			}
	//			else { // update variables
	//				Serial.println("parseObject() success");
	//				
	//			}


	//		}
	//		else 
	//		{
	//			myFile.close(); //cerramos el archivo
	//		}
	//		
	//	}
	//	else {
	//		Serial.println("Error al abrir el archivo");
	//	}

	//char json[] = "{\"sensor\":\"gps\",\"time\":1351824120,\"data\":[48.756080,2.302038]}";

	//myFile = SD.open(nomfitxerConfig, FILE_READ);//abrimos  el archivo 
	//if (myFile) {

	//		if (myFile.available())
	//		{
	//			contingutFitxerConf = myFile.readString();
	//		}
	//		myFile.close();
	//}
	//Serial.println(contingutFitxerConf);

	////
	//// Step 1: Reserve memory space
	////
	//StaticJsonBuffer<200> jsonBuffer;

	////
	//// Step 2: Deserialize the JSON string
	////
	//JsonObject& root = jsonBuffer.parseObject(contingutFitxerConf);

	//if (!root.success())
	//{
	//	Serial.println("parseObject() failed");
	//	return;
	//}
	//else
	//{
	//	Serial.println("parseObject success");
	//}

	//Serial.println(contingutFitxerConf);
	//
	////char cJson[]= new char[contingutFitxerConf.length()];
	//JsonObject& root = jsonBuffer.parseObject(contingutFitxerConf.toCharArray());

	//if (!root.success()) {
	//	Serial.println("parseObject() failed");
	//	return;
	//}

	//char* skimmer = root["﻿Skimmer"];

	//Serial.println(skimmer);

//char json[MAX_FILE_SIZE];
//readFile("confPins.txt", json, MAX_FILE_SIZE);
//
//Serial.println(json); // <- SHOW ME THE OUTPUT OF THIS!!!!!
//
//StaticJsonBuffer<JSON_BUFFER_SIZE> jsonBuffer;
//
//JsonObject& root = jsonBuffer.parseObject(json);
//
//if (!root.success()) {
//	Serial.println("parseObject() failed");
//	return;
//}
//else
//{
//	Serial.println("parseObject() success");
//}
	
	//myFile = SD.open(nomfitxerConfig, FILE_READ);//abrimos  el archivo 
	//if (myFile) {

	//		if (myFile.available())
	//		{
	//			contingutFitxerConf = myFile.readString();
	//		}
	//		myFile.close();
	//}
	//Serial.println(contingutFitxerConf);


				//DynamicJsonBuffer  jsonBuffer(200);
	//JsonObject& root = jsonBuffer.parseObject(SD.open(nomfitxerConfig, FILE_READ));    // breaks the JSON string into individual items, saves into JsonObject 'root'
	//			if (!root.success()) {
	//				Serial.println("parseObject() failed");
	//				return;   //if parsing failed, this will exit the function and not change the values to 00

	//			}
	//			else { // update variables
	//				Serial.println("parseObject() success");
	//				
	//			}
	//aJsonObject* root = aJson.parse(contingutFitxerConf.c_str());

	//if (root != NULL) {
	//	Serial.println("Parsed successfully 1 " );
	//	aJsonObject* name = aJson.getObjectItem(root, "name");
	//	
	//	Serial.println(name);
	//}
	//else {
	//	Serial.println("Parsed error 1 ");
	//}
	//aJsonObject* jsonObject = aJson.parse(SD.open(nomfitxerConfig, FILE_READ));


		StaticJsonBuffer<1000> jsonBuffer;
	//DynamicJsonBuffer  jsonBuffer(200);
	String contingutFitxerConf;

#define MAX_FILE_SIZE 1024
#define JSON_BUFFER_SIZE 200

	void readFile(const char *fileName, char *buffer, size_t maxSize) {
		File file = SD.open(fileName, FILE_READ);
		file.readBytes(buffer, maxSize);
		file.close();
	}

	//pinMode(pinReleSkimmer, OUTPUT);
	//pinMode(pinReleBombaCirc1, OUTPUT);
	//pinMode(pinReleBombaCirc2, OUTPUT);
	//pinMode(pinReleBombesPujada, OUTPUT);
	//pinMode(pinReleBombaSump, OUTPUT);
	//pinMode(pinReleCalentador, OUTPUT);
	//pinMode(pinReleRefrigerador, OUTPUT);
	//pinMode(pinReleVentiladorAcuari, OUTPUT);
	//pinMode(pinRelemVentiladorInternSump, OUTPUT);
	//pinMode(pinReleLlumRefugi, OUTPUT);
	//pinMode(pinReleUV, OUTPUT);

	//if (!SD.begin(4)) {
	//	Serial.println(F("SD Incorrecte"));
	//	SetupCorrecte = 0;
	//	ErrorSetup = "SD Incorrecte";
	//	return;
	//}